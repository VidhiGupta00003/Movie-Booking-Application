import _extends from "@babel/runtime/helpers/esm/extends";
/* eslint-disable class-methods-use-this */
import defaultDayjs from 'dayjs';
import weekOfYear from 'dayjs/plugin/weekOfYear';
import customParseFormatPlugin from 'dayjs/plugin/customParseFormat';
import localizedFormatPlugin from 'dayjs/plugin/localizedFormat';
import isBetweenPlugin from 'dayjs/plugin/isBetween';
import { buildWarning } from '../internals/utils/warning';
defaultDayjs.extend(customParseFormatPlugin);
defaultDayjs.extend(localizedFormatPlugin);
defaultDayjs.extend(isBetweenPlugin);
const localeNotFoundWarning = buildWarning(['Your locale has not been found.', 'Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale', "Or you forget to import the locale with `require('dayjs/locale/{localeUsed}')`", 'fallback on English locale']);
const formatTokenMap = {
  // Year
  YY: 'year',
  YYYY: 'year',
  // Month
  M: 'month',
  MM: 'month',
  MMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  MMMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  // Day of the month
  D: 'day',
  DD: 'day',
  Do: 'day',
  // Day of the week
  d: 'weekDay',
  dd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  ddd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  dddd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  // Meridiem
  A: 'meridiem',
  a: 'meridiem',
  // Hours
  H: 'hours',
  HH: 'hours',
  h: 'hours',
  hh: 'hours',
  // Minutes
  m: 'minutes',
  mm: 'minutes',
  // Seconds
  s: 'seconds',
  ss: 'seconds'
};
const defaultFormats = {
  normalDateWithWeekday: 'ddd, MMM D',
  normalDate: 'D MMMM',
  shortDate: 'MMM D',
  monthAndDate: 'MMMM D',
  dayOfMonth: 'D',
  year: 'YYYY',
  month: 'MMMM',
  monthShort: 'MMM',
  monthAndYear: 'MMMM YYYY',
  weekday: 'dddd',
  weekdayShort: 'ddd',
  minutes: 'mm',
  hours12h: 'hh',
  hours24h: 'HH',
  seconds: 'ss',
  fullTime: 'LT',
  fullTime12h: 'hh:mm A',
  fullTime24h: 'HH:mm',
  fullDate: 'll',
  fullDateWithWeekday: 'dddd, LL',
  fullDateTime: 'lll',
  fullDateTime12h: 'll hh:mm A',
  fullDateTime24h: 'll HH:mm',
  keyboardDate: 'L',
  keyboardDateTime: 'L LT',
  keyboardDateTime12h: 'L hh:mm A',
  keyboardDateTime24h: 'L HH:mm'
};
const withLocale = (dayjs, locale) => !locale ? dayjs : (...args) => dayjs(...args).locale(locale);

/**
 * Based on `@date-io/dayjs`
 *
 * MIT License
 *
 * Copyright (c) 2017 Dmitriy Kovalenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
export class AdapterDayjs {
  constructor({
    locale: _locale,
    formats,
    instance
  } = {}) {
    this.isMUIAdapter = true;
    this.rawDayJsInstance = void 0;
    this.lib = 'dayjs';
    this.dayjs = void 0;
    this.locale = void 0;
    this.formats = void 0;
    this.escapedCharacters = {
      start: '[',
      end: ']'
    };
    this.formatTokenMap = formatTokenMap;
    this.getLocaleFormats = () => {
      const locales = this.rawDayJsInstance.Ls ?? defaultDayjs.Ls;
      const locale = this.locale || 'en';
      let localeObject = locales[locale];
      if (localeObject === undefined) {
        localeNotFoundWarning();
        localeObject = locales.en;
      }
      return localeObject.formats;
    };
    this.date = value => {
      if (value === null) {
        return null;
      }
      return this.dayjs(value);
    };
    this.toJsDate = value => {
      return value.toDate();
    };
    this.parseISO = isoString => {
      return this.dayjs(isoString);
    };
    this.toISO = value => {
      return value.toISOString();
    };
    this.parse = (value, format) => {
      if (value === '') {
        return null;
      }
      return this.dayjs(value, format, this.locale, true);
    };
    this.getCurrentLocaleCode = () => {
      return this.locale || 'en';
    };
    this.is12HourCycleInCurrentLocale = () => {
      /* istanbul ignore next */
      return /A|a/.test(this.getLocaleFormats().LT || '');
    };
    this.expandFormat = format => {
      const localeFormats = this.getLocaleFormats();

      // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js
      const t = formatBis => formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (_, a, b) => a || b.slice(1));
      return format.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (_, a, b) => {
        const B = b && b.toUpperCase();
        return a || localeFormats[b] || t(localeFormats[B]);
      });
    };
    this.getFormatHelperText = format => {
      return this.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();
    };
    this.isNull = date => {
      return date === null;
    };
    this.isValid = value => {
      return this.dayjs(value).isValid();
    };
    this.format = (date, formatKey) => {
      return this.formatByString(date, this.formats[formatKey]);
    };
    this.formatByString = (date, formatString) => {
      return this.dayjs(date).format(formatString);
    };
    this.formatNumber = numberToFormat => {
      return numberToFormat;
    };
    this.getDiff = (date, comparing, units) => {
      return date.diff(comparing, units);
    };
    this.isEqual = (value, comparing) => {
      if (value === null && comparing === null) {
        return true;
      }
      return this.dayjs(value).isSame(comparing);
    };
    this.isSameYear = (date, comparing) => {
      return date.isSame(comparing, 'year');
    };
    this.isSameMonth = (date, comparing) => {
      return date.isSame(comparing, 'month');
    };
    this.isSameDay = (date, comparing) => {
      return date.isSame(comparing, 'day');
    };
    this.isSameHour = (date, comparing) => {
      return date.isSame(comparing, 'hour');
    };
    this.isAfter = (date, value) => {
      return date.isAfter(value);
    };
    this.isAfterYear = (date, value) => {
      return date.isAfter(value, 'year');
    };
    this.isAfterDay = (date, value) => {
      return date.isAfter(value, 'day');
    };
    this.isBefore = (date, value) => {
      return date.isBefore(value);
    };
    this.isBeforeYear = (date, value) => {
      return date.isBefore(value, 'year');
    };
    this.isBeforeDay = (date, value) => {
      return date.isBefore(value, 'day');
    };
    this.isWithinRange = (date, [start, end]) => {
      return date.isBetween(start, end, null, '[]');
    };
    this.startOfYear = date => {
      return date.startOf('year');
    };
    this.startOfMonth = date => {
      return date.startOf('month');
    };
    this.endOfYear = date => {
      return date.endOf('year');
    };
    this.startOfWeek = date => {
      return date.startOf('week');
    };
    this.startOfDay = date => {
      return date.startOf('day');
    };
    this.endOfMonth = date => {
      return date.endOf('month');
    };
    this.endOfWeek = date => {
      return date.endOf('week');
    };
    this.endOfDay = date => {
      return date.endOf('day');
    };
    this.addYears = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'year') : date.add(count, 'year');
    };
    this.addMonths = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'month') : date.add(count, 'month');
    };
    this.addWeeks = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'week') : date.add(count, 'week');
    };
    this.addDays = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'day') : date.add(count, 'day');
    };
    this.addHours = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'hour') : date.add(count, 'hour');
    };
    this.addMinutes = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'minute') : date.add(count, 'minute');
    };
    this.addSeconds = (date, count) => {
      return count < 0 ? date.subtract(Math.abs(count), 'second') : date.add(count, 'second');
    };
    this.getYear = date => {
      return date.year();
    };
    this.getMonth = date => {
      return date.month();
    };
    this.getDate = date => {
      return date.date();
    };
    this.getHours = date => {
      return date.hour();
    };
    this.getMinutes = date => {
      return date.minute();
    };
    this.getSeconds = date => {
      return date.second();
    };
    this.setYear = (date, year) => {
      return date.set('year', year);
    };
    this.setMonth = (date, count) => {
      return date.set('month', count);
    };
    this.setDate = (date, count) => {
      return date.set('date', count);
    };
    this.setHours = (date, count) => {
      return date.set('hour', count);
    };
    this.setMinutes = (date, count) => {
      return date.set('minute', count);
    };
    this.setSeconds = (date, count) => {
      return date.set('second', count);
    };
    this.getDaysInMonth = date => {
      return date.daysInMonth();
    };
    this.getNextMonth = date => {
      return date.add(1, 'month');
    };
    this.getPreviousMonth = date => {
      return date.subtract(1, 'month');
    };
    this.getMonthArray = date => {
      const firstMonth = date.startOf('year');
      const monthArray = [firstMonth];
      while (monthArray.length < 12) {
        const prevMonth = monthArray[monthArray.length - 1];
        monthArray.push(this.getNextMonth(prevMonth));
      }
      return monthArray;
    };
    this.mergeDateAndTime = (date, time) => {
      return date.hour(time.hour()).minute(time.minute()).second(time.second());
    };
    this.getWeekdays = () => {
      const start = this.dayjs().startOf('week');
      return [0, 1, 2, 3, 4, 5, 6].map(diff => this.formatByString(start.add(diff, 'day'), 'dd'));
    };
    this.getWeekArray = date => {
      const start = this.dayjs(date).startOf('month').startOf('week');
      const end = this.dayjs(date).endOf('month').endOf('week');
      let count = 0;
      let current = start;
      const nestedWeeks = [];
      while (current.isBefore(end)) {
        const weekNumber = Math.floor(count / 7);
        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
        nestedWeeks[weekNumber].push(current);
        current = current.add(1, 'day');
        count += 1;
      }
      return nestedWeeks;
    };
    this.getWeekNumber = date => {
      return date.week();
    };
    this.getYearRange = (start, end) => {
      const startDate = this.dayjs(start).startOf('year');
      const endDate = this.dayjs(end).endOf('year');
      const years = [];
      let current = startDate;
      while (current.isBefore(endDate)) {
        years.push(current);
        current = current.add(1, 'year');
      }
      return years;
    };
    this.getMeridiemText = ampm => {
      return ampm === 'am' ? 'AM' : 'PM';
    };
    this.rawDayJsInstance = instance || defaultDayjs;
    this.dayjs = withLocale(this.rawDayJsInstance, _locale);
    this.locale = _locale;
    this.formats = _extends({}, defaultFormats, formats);
    defaultDayjs.extend(weekOfYear);
  }
}