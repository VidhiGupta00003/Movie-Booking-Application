import defaultDayjs, { Dayjs } from 'dayjs';
import { FieldFormatTokenMap, MuiPickersAdapter, AdapterFormats, AdapterUnits } from '../models';
interface Opts {
    locale?: string;
    /** Make sure that your dayjs instance extends customParseFormat and advancedFormat */
    instance?: typeof defaultDayjs;
    formats?: Partial<AdapterFormats>;
}
type Constructor = (...args: Parameters<typeof defaultDayjs>) => Dayjs;
/**
 * Based on `@date-io/dayjs`
 *
 * MIT License
 *
 * Copyright (c) 2017 Dmitriy Kovalenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
export declare class AdapterDayjs implements MuiPickersAdapter<Dayjs> {
    isMUIAdapter: boolean;
    rawDayJsInstance: typeof defaultDayjs;
    lib: string;
    dayjs: Constructor;
    locale?: string;
    formats: AdapterFormats;
    constructor({ locale, formats, instance }?: Opts);
    escapedCharacters: {
        start: string;
        end: string;
    };
    formatTokenMap: FieldFormatTokenMap;
    private getLocaleFormats;
    date: (value?: any) => defaultDayjs.Dayjs | null;
    toJsDate: (value: Dayjs) => Date;
    parseISO: (isoString: string) => defaultDayjs.Dayjs;
    toISO: (value: Dayjs) => string;
    parse: (value: any, format: string) => defaultDayjs.Dayjs | null;
    getCurrentLocaleCode: () => string;
    is12HourCycleInCurrentLocale: () => boolean;
    expandFormat: (format: string) => string;
    getFormatHelperText: (format: string) => string;
    isNull: (date: Dayjs | null) => boolean;
    isValid: (value: any) => boolean;
    format: (date: Dayjs, formatKey: keyof AdapterFormats) => string;
    formatByString: (date: Dayjs, formatString: string) => string;
    formatNumber: (numberToFormat: string) => string;
    getDiff: (date: Dayjs, comparing: Dayjs, units?: AdapterUnits) => number;
    isEqual: (value: any, comparing: any) => boolean;
    isSameYear: (date: Dayjs, comparing: Dayjs) => boolean;
    isSameMonth: (date: Dayjs, comparing: Dayjs) => boolean;
    isSameDay: (date: Dayjs, comparing: Dayjs) => boolean;
    isSameHour: (date: Dayjs, comparing: Dayjs) => boolean;
    isAfter: (date: Dayjs, value: Dayjs) => boolean;
    isAfterYear: (date: Dayjs, value: Dayjs) => boolean;
    isAfterDay: (date: Dayjs, value: Dayjs) => boolean;
    isBefore: (date: Dayjs, value: Dayjs) => boolean;
    isBeforeYear: (date: Dayjs, value: Dayjs) => boolean;
    isBeforeDay: (date: Dayjs, value: Dayjs) => boolean;
    isWithinRange: (date: Dayjs, [start, end]: [Dayjs, Dayjs]) => boolean;
    startOfYear: (date: Dayjs) => defaultDayjs.Dayjs;
    startOfMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfYear: (date: Dayjs) => defaultDayjs.Dayjs;
    startOfWeek: (date: Dayjs) => defaultDayjs.Dayjs;
    startOfDay: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfWeek: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfDay: (date: Dayjs) => defaultDayjs.Dayjs;
    addYears: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addMonths: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addWeeks: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addDays: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addHours: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addMinutes: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addSeconds: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    getYear: (date: Dayjs) => number;
    getMonth: (date: Dayjs) => number;
    getDate: (date: Dayjs) => number;
    getHours: (date: Dayjs) => number;
    getMinutes: (date: Dayjs) => number;
    getSeconds: (date: Dayjs) => number;
    setYear: (date: Dayjs, year: number) => defaultDayjs.Dayjs;
    setMonth: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    setDate: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    setHours: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    setMinutes: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    setSeconds: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    getDaysInMonth: (date: Dayjs) => number;
    getNextMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    getPreviousMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    getMonthArray: (date: Dayjs) => defaultDayjs.Dayjs[];
    mergeDateAndTime: (date: Dayjs, time: Dayjs) => defaultDayjs.Dayjs;
    getWeekdays: () => string[];
    getWeekArray: (date: Dayjs) => defaultDayjs.Dayjs[][];
    getWeekNumber: (date: Dayjs) => number;
    getYearRange: (start: Dayjs, end: Dayjs) => defaultDayjs.Dayjs[];
    getMeridiemText: (ampm: 'am' | 'pm') => "AM" | "PM";
}
export {};
